version: '3'

# Define services
services:

  # Backend service
  backend-service:
    #image: backend:v1.0.0 # Configuration for building the docker image for the backend service
    build:
      context: ./backend # Use an image built from the specified dockerfile in the `backend` directory.
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on:
        - db-mysql # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:mysql://db-mysql:3306/MyAPP?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      SPRING_DATASOURCE_USERNAME: app
      SPRING_DATASOURCE_PASSWORD: P@ssw0rd
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend

  # Frontend Service
  frontend-service:
    #image: frontend:v1.0.0 # Configuration for building the docker image for the frontend service
    build:
      context: frontend # Use an image built from the specified dockerfile in the `frontend` directory.
      dockerfile: Dockerfile
      args:
        REACT_APP_API_BASE_URL: http://127.0.0.1:8080/api
    ports:
      - "9090:3000" # Forward the exposed port 80 on the container to port 80 on the host machine
    restart: always
    depends_on:
      - backend-service
    networks:
      - frontend

  # Database Service (Mysql)
  db-mysql:
    image: mysql:5.7
    ports:
      - "3306:3306"
    restart: always
    environment:
      MYSQL_DATABASE: MyAPP
      MYSQL_USER: app
      MYSQL_PASSWORD: P@ssw0rd
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - backend
    healthcheck:
      test: "/usr/bin/mysql --user=root --password=root--execute \"SHOW DATABASES;\""
      interval: 2s
      timeout: 20s
      retries: 10

# Volumes
volumes:
  db-data:

# Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend: